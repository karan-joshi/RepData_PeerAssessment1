cacheSolve(x)
source('~/Data Science Coursera/R Projects/Assignment2.R')
x <- makeCacheMatrix(matrix(c(1,2,3,4),2,2))
cacheSolve(x)
cacheSolve(x)
library(swirl)
swirl()
library(swirl)
install_course("Manipulating Data with dplyr")
0
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_course("Manipulating Data with dplyr")
install_course("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf
)
rm("mydf")
print(tbl_df)
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
-(5:20)
select(cran -(X:size))
select(cran -(x:size))
select(cran, -(X:size))
filter(cran, package== "swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country="US" | country=="IN")
filter(cran, country=="US" | country=="IN")
filter(cran, size>100500, r_os=="linux-gnu")
is.na(3, 5, NA, 10)
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package, ip_id)
arrange(cran2,country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb= size/ 2^20)
mutate(cran3, size_mb= size/ 2^20, size_gb= size_mb/ 2^10)
mutate(cran3, correct_size= size +1000)
summarize(cran, avg_bytes= mean(size))
libraray(dplyr)
library(dplyr)
cran <- tbl_df("mydf")
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(cran, mean(size))
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs=0.99
)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(yp_counts)
View(top_counts)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
libray(swirl)
library(swirl)
ls()
rm(list=ls())
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count())
res <- gather(students2, sex_class, count
)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col= sex_class, ito= c("sex", "class"))
separate(res, col= sex_class, into= c("sex", "class"))
submit(0)
submit()
submit()
students3
submit()
submit()
?spread
submit()
submit()
submit()
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status= "failed")
bind_rows(passed, failed)
sat
submit()
submit()
?separate
submit()
submit()
library(swirl)
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, color="blue")
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12)
abline(v=12, lwd=2)
abline(v=12, lwd=4)
abline(v=12, col="magenta", lwd=4)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg= table(pollition$region)
reg= table(pollution$region)
reg<- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Countries in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(data=pollution, pm25~region, col="red")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
subset(pollution, region= "east")
east <- subset(pollution, region = "east")
east <- subset(pollution,region=="east")
head(east)
hist(east$pm25, col="green")
subset(pollution, region= "west")
hist(subset(pollution,region=="west")$pm25, col = "green")
plot(latitude~pm25, data=pollution)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col= pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution,region=="west")
plot(west$latitude, west$pm25, main= "West")
plot(east$latitude, east$pm25, main= "east")
plot(east$latitude, east$pm25, main= "East")
?Devices
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main= "Old faithful Geyser data"))
with(faithful, plot(eruptions, waiting, main= "Old Faithful Geyser data"))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file=myplot.pdf)
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting, main= "Old Faithful Geyser data"))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file= "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data =state, layout= c(4,1))
xyplot(Life.Exp ~ Income | region, data =state, layout= c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
?device
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages(ggplot2)
"ggplot2"
install.packages("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hclust(d=distxy)
hc <- hclust(d=distxy)
hc
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col= cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
library(swirl)
swirl()
head(dataMatrix)
heatmap(dataMatrix)
"addPatt.R"
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1!v[,1]
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,c(1,2)]
svd$d
svd2$d
dim(faceData)
a1 <- (svd1$u[,1])*(svd1$d[1])*(svd1$v[,1])
a1 <- (svd1$u[,1])*(svd1$d[1]) %*% t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
sd
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
sd
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
getwd()
setwd("C:/Users/kjoshi/Documents/cv/ML/Data Science Course/Course RR Project 1/RepData_PeerAssessment1")
mydata <- read.csv("activity.csv")
summary(mydata)
hist(mydata$steps)
mean(mydata$steps)
mean(mydata$steps, na.rm=TRUE)
median(mydata$steps, na.rm=TRUE)
hist(mydata$activity)
hist(mydata$steps)
hist(mydata$steps, xlab= "Steps taken each day", tite= "Relation between Steps and frequency")
hist(mydata$steps, xlab= "Steps taken each day", title= "Relation between Steps and frequency")
hist(mydata$steps, xlab= "Steps taken each day", main= "Relation between Steps and frequency")
aggregateSteps <- aggregate(steps ~ date, data = mydata, sum, na.rm = TRUE)
hist(aggregateSteps$steps)
aggregateSteps <- aggregate(steps ~ date, data = mydata, sum, na.rm = TRUE)
mean <- mean(aggregateSteps$steps, na.rm=TRUE)
median <- median(aggregateSteps$steps, na.rm=TRUE)
hist(aggregateSteps$steps, xlab= "Steps taken each day", main= "Relation between Steps and frequency")
tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
averaged_series <- tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
summary(averaged_series)
plot(row.names(averaged_series), averaged_series, type="l")
plot(row.names(averaged_series), averaged_series, type="l", col="red")
plot(row.names(averaged_series), averaged_series, type="l", col="blue")
plot(row.names(averaged_series), averaged_series, type="l", col="blue", xlab= "5-min Intervals", ylab="Average steps per day")
averaged_series <- tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
plot(row.names(averaged_series), averaged_series, type="l", col="blue", xlab= "5-min Intervals", ylab="Average steps per day")
averaged_series <- tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
plot(row.names(averaged_series), averaged_series, type="l", col="blue", xlab= "5-min Intervals", ylab="Average steps per day")
is.na(mydata)
sum(is.na(mydata))
steps_mean <- aggregate(steps ~ interval, data = mydata, FUN = mean)
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
steps_mean <- aggregate(steps ~ interval, data = mydata,mean)
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
steps_mean <- aggregate(steps ~ interval, data = mydata, FUN = mean)
steps_mean <- aggregate(steps ~ interval, data = mydata, mean)
steps_mean <- aggregate(steps ~ interval, data = mydata, mean, na.rm=TRUE)
steps_mean <- tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, mydata$interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, steps_mean$interval == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, rows.names(steps_mean) == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, row.names(steps_mean) == obs$interval)$steps
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, row.names(steps_mean) == obs$interval)
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
new_data <- mydata
new_data$steps <- fillNA
head(new_data)
sum(is.na(new_data))
steps_mean <- tapply(mydata$steps, mydata$interval, mean, na.rm=TRUE)
fillNA <- numeric()
for (i in 1:nrow(mydata)) {
obs <- mydata[i, ]
if (is.na(obs$steps)) {
steps <- subset(steps_mean, row.names(steps_mean) == obs$interval)
} else {
steps <- obs$steps
}
fillNA <- c(fillNA, steps)
}
new_data <- mydata
new_data$steps <- fillNA
aggregateSteps2 <- aggregate(steps ~ date, data = new_data, sum, na.rm = TRUE)
mean2 <- mean(aggregateSteps2$steps, na.rm=TRUE)
median2 <- median(aggregateSteps2$steps, na.rm=TRUE)
hist(aggregateSteps2$steps, xlab= "Steps taken each day", main= "Relation between Steps and frequency")
mean2
median2
weekday <- weekdays(new_data$date)
day <- vector()
for (i in 1:nrow(new_data)) {
if (weekday[i] == "Saturday") {
day[i] <- "Weekend"
} else if (weekday[i] == "Sunday") {
day[i] <- "Weekend"
} else {
day[i] <- "Weekday"
}
}
new_data$day <- factor(new_data$day)
weekday <- weekdays(new_data$date)
library(lattice)
new_data$date <- as.Date(new_data$date, "%Y-%m-%d")
weekday <- weekdays(new_data$date)
day <- vector()
for (i in 1:nrow(new_data)) {
if (weekday[i] == "Saturday") {
day[i] <- "Weekend"
} else if (weekday[i] == "Sunday") {
day[i] <- "Weekend"
} else {
day[i] <- "Weekday"
}
}
new_data$day <- factor(new_data$day)
new_data$day <- day
new_data$day <- factor(new_data$day)
head(new_data)
